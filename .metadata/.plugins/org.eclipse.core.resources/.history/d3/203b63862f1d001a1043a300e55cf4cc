package data;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import helpers.Vrijeme;
import static helpers.Grafika.*;
import java.util.ArrayList;
public class Igrac {

	private PlociceMap mapa;
	private TipPlocice[] tipoviPlocica;
	private ValSetup valSetup;
	private ArrayList<Top> listaTopova;
	boolean leftMouseButtonDown, rightMouseButtonDown, holdingTower;
	private Top tempTower;
	public static int Cash, Lives;
	
	public Igrac(PlociceMap grid, ValSetup waveManager) {
		this.mapa = grid;
		this.tipoviPlocica = new TipPlocice[3];
		this.tipoviPlocica[0] = TipPlocice.Pijesak;
		this.tipoviPlocica[1] = TipPlocice.Zemlja;
		this.tipoviPlocica[2] = TipPlocice.Voda;
		this.valSetup = waveManager;
		this.listaTopova = new ArrayList<Top>();
		this.leftMouseButtonDown = false;
		this.rightMouseButtonDown = false;
		this.holdingTower = false;
		this.tempTower = null;
		Cash = 0;
		Lives = 0;
	}
	
	// Initialize Cash and Lives values for Player
	public void setup() {
		Cash = 200;
		Lives = 10;
	}
	
	public static boolean modifyCash(int amount) {
		if (Cash + amount >= 0) {
			Cash += amount;
			return true;
		}
		return false;
	}
	
	public static void modifyLives(int amount) {
		Lives += amount;
	}
	
	public void update() {
		
		// Update holding tower
		if (holdingTower) {
			tempTower.postaviX(getMouseTile().dohvatiX());
			tempTower.postaviY(getMouseTile().dohvatiY());
			tempTower.crtaj();
		}
		
		// Update all towers in the game
		for (Top t : listaTopova) {
			t.osvjezi();
			t.crtaj();
			t.updateEnemyList(valSetup.getCurrentWave().getEnemyList());
		}
		// Handle Mouse Input
		if (Mouse.isButtonDown(0) && !leftMouseButtonDown) {
			placeTower();
		}
		
		if (Mouse.isButtonDown(1) && !rightMouseButtonDown) {
			System.out.println("Right button clicked");
		}
		leftMouseButtonDown = Mouse.isButtonDown(0);
		rightMouseButtonDown = Mouse.isButtonDown(1);
		
		// Handle Keyboard Input
		while (Keyboard.next()) {
			if (Keyboard.getEventKey() == Keyboard.KEY_RIGHT && Keyboard.getEventKeyState()) {
				Vrijeme.changeMultiplier(0.2f);
			}
			if (Keyboard.getEventKey() == Keyboard.KEY_LEFT && Keyboard.getEventKeyState()) {
				Vrijeme.changeMultiplier(-0.2f);
			}
		}
	}
	
	private void placeTower() {
		Plocica currentTile= getMouseTile();
		if (holdingTower) {
			if (!currentTile.jeZauzeta() && modifyCash(-tempTower.getCost())) {
				listaTopova.add(tempTower);
				currentTile.postaviZauzetost(true);
				holdingTower = false;
				tempTower = null;
			}
		}
	}
	
	public void pickTower(Top t) {
		tempTower = t;
		holdingTower = true;
	}
	
	private Plocica getMouseTile() {
		return mapa.dohvatiPlocicu(Mouse.getX() / PLOCICA_SIZE, (VISINA - Mouse.getY() - 1) / PLOCICA_SIZE);
	}
	
}







