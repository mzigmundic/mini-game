package com.glavni;

import org.newdawn.slick.opengl.Texture;

import static com.sporedni.Grafika.*;
import static com.sporedni.Vrijeme.*;

import java.util.ArrayList;

public class Neprijatelj implements Jedinka {
	private int sirina, visina, trenutnaTocka;
	private float brzina, x, y, energija, pocetnaEnergija, trenutnaEnergija;
	private Texture tekstura, energijaPozadina, energijaZeleno, energijaOkvir;
	private Plocica pocetnaPlocica;
	private boolean prviPut, ziv;
	private PlociceMapa mapa;
	private ArrayList<TockaProvjerePutanje> listaTocakaProvjere;
	private int[] smjerovi;
	
	public Neprijatelj(int plocicaX, int plocicaY, PlociceMapa mapa) {
		this.tekstura = UcitajTeksturuBrzo("neprijateljB");
		this.energijaPozadina = UcitajTeksturuBrzo("energijaPozadina");
		this.energijaZeleno = UcitajTeksturuBrzo("energijaZeleno");
		this.energijaOkvir = UcitajTeksturuBrzo("energijaOkvir");
		this.pocetnaPlocica= mapa.dohvatiPlocicu(plocicaX, plocicaY);
		this.x = pocetnaPlocica.dohvatiX();
		this.y = pocetnaPlocica.dohvatiY();
		this.sirina = PLOCICA_SIZE;
		this.visina = PLOCICA_SIZE;
		this.brzina = 25;
		this.energija = 200;
		this.pocetnaEnergija = energija;
		this.trenutnaEnergija = energija;
		this.mapa = mapa;
		this.prviPut = true;
		this.ziv = true;
		this.listaTocakaProvjere = new ArrayList<TockaProvjerePutanje>();
		this.smjerovi = new int[2];
		// x smjer
		this.smjerovi[0] = 0;
		// y smjer
		this.smjerovi[1] = 0;
		this.smjerovi = pronadjiSljedecuPutanju(pocetnaPlocica);
		this.trenutnaTocka = 0;
		popuniListuTocakaProvjere();
	}
	
	public Neprijatelj(Texture tekstura, Plocica pocetnaPlocica, PlociceMapa mapa, int sirina, int visina, float brzina, float energija) {
		this.tekstura = tekstura;
		this.energijaPozadina = UcitajTeksturuBrzo("energijaPozadina");
		this.energijaZeleno = UcitajTeksturuBrzo("energijaZeleno");
		this.energijaOkvir = UcitajTeksturuBrzo("energijaOkvir");
		this.pocetnaPlocica = pocetnaPlocica;
		this.x = pocetnaPlocica.dohvatiX();
		this.y = pocetnaPlocica.dohvatiY();
		this.sirina = sirina;
		this.visina = visina;
		this.brzina = brzina;
		this.energija = energija;
		this.pocetnaEnergija = energija;
		this.trenutnaEnergija = energija;
		this.mapa = mapa;
		this.prviPut = true;
		this.ziv = true;
		this.listaTocakaProvjere = new ArrayList<TockaProvjerePutanje>();
		this.smjerovi = new int[2];
		// x smjer
		this.smjerovi[0] = 0;
		// y smjer
		this.smjerovi[1] = 0;
		this.smjerovi = pronadjiSljedecuPutanju(pocetnaPlocica);
		this.trenutnaTocka = 0;
		popuniListuTocakaProvjere();
	}
	
	public void osvjezi() {
		// Provjeri je li ova klasa prvi put osvjezena, ako je ne radi nista
		if (prviPut) {
			prviPut = false;
		} else {
			if (dosegaoTockuProvjere()) {
				// Provjeri jel ima jos tocaka provjere prije nastavka
				if (trenutnaTocka + 1 == listaTocakaProvjere.size()) {
					dosaoDoKraja();
				} else {
					trenutnaTocka++;
				}
			} else {
				// Ako nije na tocki provjere, nastavi se gibat dalje u trenutnom smjeru
				x += Delta() * listaTocakaProvjere.get(trenutnaTocka).dohvatiXSmjer() * brzina;
				y += Delta() * listaTocakaProvjere.get(trenutnaTocka).dohvatiYSmjer() * brzina;
			}
		}
	}
	
	private void dosaoDoKraja() {
		Igrac.promijeniZivote(-1);
		umri();
	}
	
	private boolean dosegaoTockuProvjere() {
		boolean dosegao = false;
		Plocica t = listaTocakaProvjere.get(trenutnaTocka).dohvatiPlocicu();
		if ( x > t.dohvatiX() - 3 
				&& x < t.dohvatiX() + 3 
				&& y > t.dohvatiY() - 3 
				&& y < t.dohvatiY() +3) {
			dosegao = true;
			x = t.dohvatiX();
			y = t.dohvatiY();
		}
		return dosegao;
	}
	
	public void popuniListuTocakaProvjere() {
		// Manualno dodaj prvu tocku
		listaTocakaProvjere.add(pronadjiSljedecuTocku(pocetnaPlocica, smjerovi = pronadjiSljedecuPutanju(pocetnaPlocica)));
		int brojac = 0;
		boolean nastavi = true;
		while(nastavi) {
			int[] trenutniSmjer = pronadjiSljedecuPutanju(listaTocakaProvjere.get(brojac).dohvatiPlocicu());
			if (trenutniSmjer[0] == 2 || brojac == 20) {
				nastavi = false;
			} else {
				listaTocakaProvjere.add(pronadjiSljedecuTocku(listaTocakaProvjere.get(brojac).dohvatiPlocicu(), smjerovi = pronadjiSljedecuPutanju(listaTocakaProvjere.get(brojac).dohvatiPlocicu())));
			}
			brojac++;
		}
	}
	
	private TockaProvjerePutanje pronadjiSljedecuTocku(Plocica plocica, int[] smjerovi) {
		Plocica sljedeca = null;
		TockaProvjerePutanje tocka = null;
		
		boolean pronasao = false;
		int brojac = 1;
		
		while(!pronasao) {
			if (plocica.dohvatiPozicijuX() + smjerovi[0] * brojac == mapa.dohvatiSirinuPlocice() || plocica.dohvatiPozicijuY() + smjerovi[1] * brojac == mapa.dohvatiVisinuPlocice() ||
					plocica.dohvatiTipPlocice() != mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX() + smjerovi[0] * brojac, plocica.dohvatiPozicijuY() + smjerovi[1] * brojac).dohvatiTipPlocice()) {
				pronasao = true;
				brojac -= 1;
				sljedeca = mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX() + smjerovi[0] * brojac, plocica.dohvatiPozicijuY() + smjerovi[1] * brojac);
			}
			brojac++;
		}
		tocka = new TockaProvjerePutanje(sljedeca, smjerovi[0], smjerovi[1]);
		return tocka;
	}
	
	private int[] pronadjiSljedecuPutanju(Plocica plocica) {
		int[] smjer = new int[2];
		Plocica gore = mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX(), plocica.dohvatiPozicijuY() - 1);
		Plocica desno = mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX() + 1, plocica.dohvatiPozicijuY());
		Plocica dolje = mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX(), plocica.dohvatiPozicijuY() + 1);
		Plocica lijevo = mapa.dohvatiPlocicu(plocica.dohvatiPozicijuX() - 1, plocica.dohvatiPozicijuY());
		
		// Provjeri jel se trenutno naseljeni tip plocice podudara s tipom plocice gore dolje lijevo ili desno 
		if (plocica.dohvatiTipPlocice() == gore.dohvatiTipPlocice() && smjerovi[1] != 1) {
			smjer[0] = 0;
			smjer[1] = -1;
		} else if (plocica.dohvatiTipPlocice() == desno.dohvatiTipPlocice() && smjerovi[0] != -1) {
			smjer[0] = 1;
			smjer[1] = 0;
		} else if (plocica.dohvatiTipPlocice() == dolje.dohvatiTipPlocice() && smjerovi[1] != -1) {
			smjer[0] = 0;
			smjer[1] = 1;
		} else if (plocica.dohvatiTipPlocice() == lijevo.dohvatiTipPlocice() && smjerovi[0] != 1) {
			smjer[0] = -1;
			smjer[1] = 0;
		} else {
			smjer[0] = 2;
			smjer[1] = 2;
		}
		return smjer;
	}
	
	public void primiStetu(int kolicina) {
		energija -= kolicina;
		if ( energija <= 0) {
			umri();
			Igrac.promijeniPare(5);
		}
	}
	
	private void umri() {
		ziv = false;
	}
	
	public void crtaj() {
		float postotakEnergije = energija / pocetnaEnergija;
		// Tekstura Neprijatelja
		CrtajQTeksturu(tekstura, x, y, sirina, visina);
		// Tekstura Energije
		CrtajQTeksturu(energijaPozadina, x, y - 16, sirina, 8);
		CrtajQTeksturu(energijaZeleno, x, y - 16, sirina * postotakEnergije, 8);
		CrtajQTeksturu(energijaOkvir, x, y - 16, sirina, 8);
	}
	
	public void smanjiTrenutnuEnergiju(float kolicina) {
		trenutnaEnergija -= kolicina;
	}
	
	public float dohvatiTrenutnuEnergiju() {
		return trenutnaEnergija;
	}

	public int dohvatiSirinu() {
		return sirina;
	}

	public void postaviSirinu(int sirina) {
		this.sirina = sirina;
	}

	public int dohvatiVisinu() {
		return visina;
	}

	public void postaviVisinu(int visina) {
		this.visina = visina;
	}

	public float dohvatiEnergiju() {
		return energija;
	}

	public void postaviEnergiju(float energija) {
		this.energija = energija;
	}

	public float dohvatiBrzinu() {
		return brzina;
	}

	public void postaviBrzinu(float brzina) {
		this.brzina = brzina;
	}

	public float dohvatiX() {
		return x;
	}

	public void postaviX(float x) {
		this.x = x;
	}

	public float dohvatiY() {
		return y;
	}

	public void postaviY(float y) {
		this.y = y;
	}

	public Texture dohvatiTeksturu() {
		return tekstura;
	}

	public void postaviTeksturu(Texture tekstura) {
		this.tekstura = tekstura;
	}
	
	public void postaviTeksturu(String imeTeksture) {
		this.tekstura = UcitajTeksturuBrzo(imeTeksture);
	}

	public Plocica dohvatiPocetnuPlocicu() {
		return pocetnaPlocica;
	}

	public void postaviPocetnuPlocicu(Plocica pocetnaPlocica) {
		this.pocetnaPlocica = pocetnaPlocica;
	}

	public boolean jePrviPut() {
		return prviPut;
	}

	public void postaviPrvi(boolean prvi) {
		this.prviPut = prvi;
	}
	
	public PlociceMapa dohvatiMapuPlocica() {
		return mapa;
	}
	
	public boolean jeZiv() {
		return ziv;
	}
	
}
